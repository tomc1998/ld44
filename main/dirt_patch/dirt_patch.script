local constants = require "main.constants"
local state = require "main.state"

local SECONDS_FOR_BAR_DISAPPEAR = 3.0

function get_bush_growth_rate(bush_type)
   if bush_type == constants.BUSH_TYPE_RED then return 1.0 end
   assert(false, "Unknown bush type")
end

function get_bush_value(bush_type)
   if bush_type == constants.BUSH_TYPE_RED then return 4 end
   assert(false, "Unknown bush type")
end


function create_bush(self, bush_type)
   self.bush_type = bush_type
   self.bush_growth = 0
   if bush_type == constants.BUSH_TYPE_RED then
      self.bush = factory.create(self.red_currant_factory, vmath.vector3(go.get_position().x, go.get_position().y, 0.25))
      self.bush_sprite = msg.url(nil, self.bush, "sprite")
   else
      assert(false, "Unknown bush type")
   end
end

function inc_water_level(self, num)
   self.water_level = self.water_level + num
   if self.water_level > constants.MAX_WATER_LEVEL then self.water_level = constants.MAX_WATER_LEVEL end
   if self.water_level < 0 then self.water_level = 0 end
   local saturation = self.water_level / constants.MAX_WATER_LEVEL
   local tint = 1.0 - 0.5 * saturation
   sprite.set_constant("#sprite", "tint", vmath.vector4(tint, tint, tint, 1.0))
end

function harvest(self)
   if self.bush_growth == nil or self.bush == nil then return end
   if self.bush_growth < 3 then return end
   local multiplier = 1
   if math.floor(self.bush_growth) == 3 then multiplier = 0.5 end
   state:earn_money(get_bush_value(self.bush_type) * multiplier)
   go.delete(self.bush)
   self.bush = nil
   self.bush_type = nil
end

function on_message(self, id, msg, sender)
   if id == hash("plant") and self.bush == nil then
      create_bush(self, msg.bush_type)
   elseif id == hash("water") then
      inc_water_level(self, constants.MAX_WATER_LEVEL / 10)
   elseif id == hash("harvest") then
      harvest(self)
   end
end

function update(self, dt)
   inc_water_level(self, -1)
   if self.last_bar_change > 0 then self.last_bar_change = self.last_bar_change - dt end
   if self.bush then
      local saturation = self.water_level / constants.MAX_WATER_LEVEL
      self.bush_growth = math.min(self.bush_growth + dt * saturation * get_bush_growth_rate(self.bush_type), 4.0)
      local bar_filled = math.floor((self.bush_growth - math.floor(self.bush_growth)) * 13)
      if bar_filled ~= self.last_bar_value then self.last_bar_change = SECONDS_FOR_BAR_DISAPPEAR end
      self.last_bar_value = bar_filled
      local growth_stage = math.floor(self.bush_growth)
      sprite.play_flipbook(self.bush_sprite, tostring(growth_stage))
      if self.last_bar_change <= 0 or self.bush_growth == 4.0 or self.bush_growth == 0.0 then
         msg.post("#bar_sprite", "disable")
      else
         msg.post("#bar_sprite", "enable")
         sprite.play_flipbook("#bar_sprite", tostring(bar_filled))
      end
   else
      msg.post("#bar_sprite", "disable")
   end
end

function init(self)
   self.water_level = 0
   self.red_currant_factory = msg.url("#red-currant-factory")
   self.last_bar_change = SECONDS_FOR_BAR_DISAPPEAR
end
